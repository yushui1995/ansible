---
# author: lework


- name: kubeconfig | Generate the admin kubeconfig.
  shell: |
    kubectl config set-cluster kubernetes \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://{{ kubernetes_apiserver_vip }}:{{ kubernetes_apiserver_port }} \
    --kubeconfig=../admin.kubeconfig &&
    kubectl config set-credentials kubernetes-admin \
    --client-certificate=admin.pem \
    --client-key=admin-key.pem \
    --embed-certs=true \
    --kubeconfig=../admin.kubeconfig &&
    kubectl config set-context kubernetes-admin@kubernetes \
    --cluster=kubernetes \
    --user=kubernetes-admin \
    --kubeconfig=../admin.kubeconfig &&
    kubectl config use-context kubernetes-admin@kubernetes \
    --kubeconfig=../admin.kubeconfig
  args:
    chdir: "{{ kubernetes_pki_path }}"

- name: kubeconfig | Generate the controller-manager kubeconfig.
  shell: |
    kubectl config set-cluster kubernetes \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://{{ kubernetes_apiserver_vip }}:{{ kubernetes_apiserver_port }} \
    --kubeconfig=../controller-manager.kubeconfig &&
    kubectl config set-credentials system:kube-controller-manager \
    --client-certificate=controller-manager.pem \
    --client-key=controller-manager-key.pem \
    --embed-certs=true \
    --kubeconfig=../controller-manager.kubeconfig &&
    kubectl config set-context system:kube-controller-manager@kubernetes \
    --cluster=kubernetes \
    --user=system:kube-controller-manager \
    --kubeconfig=../controller-manager.kubeconfig &&
    kubectl config use-context system:kube-controller-manager@kubernetes \
    --kubeconfig=../controller-manager.kubeconfig
  args:
    chdir: "{{ kubernetes_pki_path }}"

- name: kubeconfig | Generate the scheduler kubeconfig.
  shell: |
    kubectl config set-cluster kubernetes \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://{{ kubernetes_apiserver_vip }}:{{ kubernetes_apiserver_port }} \
    --kubeconfig=../scheduler.kubeconfig &&
    kubectl config set-credentials system:kube-scheduler \
    --client-certificate=scheduler.pem \
    --client-key=scheduler-key.pem \
    --embed-certs=true \
    --kubeconfig=../scheduler.kubeconfig &&
    kubectl config set-context system:kube-scheduler@kubernetes \
    --cluster=kubernetes \
    --user=system:kube-scheduler \
    --kubeconfig=../scheduler.kubeconfig &&
    kubectl config use-context system:kube-scheduler@kubernetes \
    --kubeconfig=../scheduler.kubeconfig
  args:
    chdir: "{{ kubernetes_pki_path }}"

- name: kubeconfig | Generate the Master Kubelet kubeconfig.
  shell: |
    kubectl config set-cluster kubernetes \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://{{ kubernetes_apiserver_vip }}:{{ kubernetes_apiserver_port }} \
    --kubeconfig=../kubelet{% if item != ansible_default_ipv4.address %}-{{ hostvars[item].ansible_hostname }}{%endif%}.kubeconfig && \
    kubectl config set-credentials system:node:{{ hostvars[item].ansible_hostname }} \
    --client-certificate=kubelet-{{ hostvars[item].ansible_hostname }}.pem \
    --client-key=kubelet-{{ hostvars[item].ansible_hostname }}-key.pem \
    --embed-certs=true \
    --kubeconfig=../kubelet{% if item != ansible_default_ipv4.address %}-{{ hostvars[item].ansible_hostname }}{%endif%}.kubeconfig && \
    kubectl config set-context system:node:{{ hostvars[item].ansible_hostname }}@kubernetes \
    --cluster=kubernetes \
    --user=system:node:{{ hostvars[item].ansible_hostname }} \
    --kubeconfig=../kubelet{% if item != ansible_default_ipv4.address %}-{{ hostvars[item].ansible_hostname }}{%endif%}.kubeconfig && \
    kubectl config use-context system:node:{{ hostvars[item].ansible_hostname }}@kubernetes \
    --kubeconfig=../kubelet{% if item != ansible_default_ipv4.address %}-{{ hostvars[item].ansible_hostname }}{%endif%}.kubeconfig
  args:
    chdir: "{{ kubernetes_pki_path }}"
  with_items: "{{ play_hosts }}"

- name: kubeconfig | Generate the token id.
  shell: openssl rand 3 -hex
  register: openssl_token_id

- name: kubeconfig | Generate the token secret.
  shell: openssl rand 8 -hex
  register: openssl_token_secret

- name: kubeconfig | Generate the TLS Bootstrapping RBAC kubeconfig.
  shell: |
    kubectl config set-cluster kubernetes \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://{{ kubernetes_apiserver_vip }}:{{ kubernetes_apiserver_port }} \
    --kubeconfig=../bootstrap-kubelet.kubeconfig &&
    kubectl config set-credentials tls-bootstrap-token-user \
    --token={{ openssl_token_id.stdout }}.{{ openssl_token_secret.stdout }} \
    --kubeconfig=../bootstrap-kubelet.kubeconfig &&
    kubectl config set-context tls-bootstrap-token-user@kubernetes \
    --cluster=kubernetes \
    --user=tls-bootstrap-token-user \
    --kubeconfig=../bootstrap-kubelet.kubeconfig &&
    kubectl config use-context tls-bootstrap-token-user@kubernetes \
    --kubeconfig=../bootstrap-kubelet.kubeconfig
  args:
    chdir: "{{ kubernetes_pki_path }}"
