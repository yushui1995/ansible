---
# author: lework

- name: install | Check if tengine local file is already configured.
  stat: path={{ tengine_file_path }}
  connection: local
  register: tengine_file_result

- name: install | Create software directory.
  file: path={{ software_files_path }} state=directory
  connection: local
  when: not tengine_file_result.stat.exists
  
- name: install | Download tengine file.
  get_url: url={{ tengine_file_url }} dest={{ tengine_file_path }} validate_certs=no
  connection: local
  when: not tengine_file_result.stat.exists

- name: install | Confirm the existence of the installation directory.
  file: path={{ software_install_path }} state=directory

- name: install | Copy tengine file to agent.
  unarchive:
    src: "{{ tengine_file_path }}"
    dest: "/tmp"
    creates: "/tmp/tengine-{{ tengine_version }}"

- name: install | Ensure gcc packages are installed.
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ __package }}"

- name: install | Create tengine group.
  group: name={{ tengine_group }}

- name: install | Create tengine user.
  user: name={{ tengine_user }} group={{ tengine_group }} shell=/sbin/nologin createhome=no

- name: install | Create tengine work Directory.
  file: path={{ item }} state=directory owner={{ tengine_user }} group={{ tengine_group }}
  with_items:
   - "{{ software_install_path }}/tengine-{{ tengine_version }}"
   - "{{ tengine_conf_path }}/conf.d"
   - "{{ tengine_temp_path }}/client"
   - "{{ tengine_log_path }}"

- name: install | Check if tengine bin file is already configured.
  stat: path={{ software_install_path }}/tengine-{{ tengine_version }}/sbin/nginx
  register: tengine_bin_result

- name: install | Build an install tengine.
  shell: "{{ item }}" 
  with_items:
    - "{{ tengine_configure_command }}"
    - make && make install
  args:
    chdir: "/tmp/tengine-{{ tengine_version }}/"
  when: not tengine_bin_result.stat.exists
  
- name: install | Set the owner of the tengine directory.
  file: path={{ software_install_path }}/tengine-{{ tengine_version }} state=directory owner={{ tengine_user }} group={{ tengine_group }} recurse=yes

- name: install | Create nginx soft link.
  file: src={{ software_install_path }}/tengine-{{ tengine_version }}/sbin/nginx dest={{ tengine_daemon }} state=link

- name: install | Copy Supervisor init file into place (for non-systemd systems).
  template:
    src: "tengine.init-{{ ansible_os_family }}.j2"
    dest: /etc/init.d/tengine
    owner: root
    group: root
    mode: 0755
  when: "ansible_service_mgr != 'systemd'"
  notify: restart tengine

- name: install | Copy Supervisor unit file into place (for systemd systems).
  template:
    src: tengine.unit.j2
    dest: /etc/systemd/system/tengine.service
    owner: root
    group: root
    mode: 0644
  when: "ansible_service_mgr == 'systemd'"
  notify: restart tengine
